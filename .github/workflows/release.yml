name: Release Workflow

on:
  push:
    branches:
      - stable
      - master
    paths:
      - 'version.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: stable
          fetch-depth: 0

      - name: Get Last Release Tag
        id: last_release
        run: echo "::set-output name=TAG::$(git describe --tags --abbrev=0)"
        
      - name: Generate SHA256 Checksum for smd.py
        id: sha256_checksum
        run: |
          echo "SHA256 Checksum:" > smd.py.sha256
          sha256sum smd.py >> smd.py.sha256
          CHECKSUM=$(cat smd.py.sha256 | tr -d '\n')
          echo "::set-output name=CHECKSUM::$CHECKSUM"
        
      - name: Generate Release Notes
        id: release_notes
        run: |
          LAST_TAG=${{ steps.last_release.outputs.TAG }}
          RELEASE_NOTES=$(git log $LAST_TAG..HEAD --pretty=format:"%H%n%s%n%bEND_OF_COMMIT" | python3 .github/scripts/workflows/generate_release_notes.py)
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          # echo "::set-output name=NOTES::$RELEASE_NOTES"
          
          # RELEASE_NOTES=$(git log $LAST_TAG..HEAD --pretty=format:"%H%n%BEND_OF_COMMIT" | python -c |
          #   import sys

          #   def format_commit(commit):
          #       hash, *description_lines = commit.strip().split('\n')
          #       if description_lines:
          #           bullet_points = '\\n'.join(f'- {line.strip()}' for line in description_lines if line.strip())
          #           return bullet_points
          #       return ''

          #   commits = sys.stdin.read().strip().split('END_OF_COMMIT')
          #   formatted_commits = filter(None, (format_commit(commit) for commit in commits))
          #   formatted_notes = '\\n\\n'.join(formatted_commits)
          #   print(formatted_notes.replace('%', '%25').replace('\\n', '%0A').replace('\\r', '%0D'))
          # )
          RELEASE_NOTES="${RELEASE_NOTES}%0A%0A${{ steps.sha256_checksum.outputs.CHECKSUM }}"
          echo "::set-output name=NOTES::$RELEASE_NOTES"


      - name: Read Version File
        id: version
        run: echo "::set-output name=VERSION::$(cat version.txt)"

      # - name: Prepare Artifacts
      #   run: cp smd.py smd-${{ steps.version.outputs.VERSION }}.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.NOTES }}
          draft: false
          prerelease: false

      - name: Remove To-Do Comments
        run: sed -i '/# To-Do:/,/# \/To-Do/d' smd.py

      - name: Upload smd.py
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # asset_path: ./smd-${{ steps.version.outputs.VERSION }}.py
          asset_path: ./smd.py
          asset_name: smd.py
          asset_content_type: text/plain

      - name: Upload SHA256 Checksum File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./smd.py.sha256
          asset_name: smd.py.sha256
          asset_content_type: text/plain

